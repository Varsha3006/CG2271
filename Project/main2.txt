#include "MKL25Z4.h"    
#include "RTE_Components.h"
#include  CMSIS_device_header
#include "cmsis_os2.h"
// Device header
#define MAX_DUTY_CYCLE 0x1D4C //7500 (50Hz)
#define LEFT_FW 0 // PTB0 TPM1_CH0
#define LEFT_BK 1 // PTB1 TPM1_CH1
#define RIGHT_FW 2 // PTB2 TPM2_CH0
#define RIGHT_BK 3 // PTB3 TPM2_CH1
#define UART_RX_PORTE23 23 //PTE 23 Rx
#define BAUD_RATE 9600
#define UART2_INT_PRIO 128	
#define FW_MOTOR 3
#define RV_MOTOR 5
#define RT_MOTOR 9
#define LT_MOTOR 7
#define STOP_MOTOR 11
#define MASK(x) (1 << (x))
#define FW_MASK 0x03
#define RV_MASK 0x05
#define STOP_MASK 0x0B
#define RT_MASK 0x09
#define LT_MASK 0x07
#define SL_MASK 0x08
#define SR_MASK 0x0A
#define END_MASK 0x0C
//The 8 segment red LED
#define PTC9_Pin 9
#define red_led_segment PTC9_Pin


#define MSG_COUNT 1

volatile int speed = 3;
uint8_t rx_data = 0x01;
uint8_t uart_data;

unsigned int counter = 0;

//The 8 segment green LED
#define PTC7_Pin 7
#define PTC0_Pin 0
#define PTC3_Pin 3
#define PTC4_Pin 4
#define PTC5_Pin 5
#define PTC6_Pin 6
#define PTC10_Pin 10
#define PTC11_Pin 11

//The array of green LED segments
uint8_t green_led_segment[] = {PTC7_Pin, PTC0_Pin, PTC3_Pin, PTC4_Pin, PTC5_Pin, PTC6_Pin, PTC10_Pin, PTC11_Pin};

typedef enum states 
{ led_off,
  led_on,
}my_state_t;

osMutexId_t myMutex;
volatile int movingStatus =0;

osMessageQueueId_t  motorQ;
osMessageQueueId_t controlQ;
osMessageQueueId_t ledQ;

void initPWM() {
	// Enable Clock Gating for PORTB
	SIM->SCGC5 |= (SIM_SCGC5_PORTB_MASK);

	// Configure Mode 3 for PWM pin operation
	PORTB->PCR[LEFT_FW] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[LEFT_FW] |= PORT_PCR_MUX(3);
	PORTB->PCR[LEFT_BK] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[LEFT_BK] |= PORT_PCR_MUX(3);
	
	PORTB->PCR[RIGHT_FW] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RIGHT_FW] |= PORT_PCR_MUX(3);
	PORTB->PCR[RIGHT_BK] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RIGHT_BK] |= PORT_PCR_MUX(3);
	
	//Enable clock gating for Timer1
	SIM->SCGC6 = (SIM_SCGC6_TPM1_MASK)|(SIM_SCGC6_TPM2_MASK);
	
	//Select clock for TPM module
	SIM->SOPT2 &= ~SIM_SOPT2_TPMSRC_MASK;
	SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1); //MCGFLLCLK OR MCGPLLCLK/2
	
	//set modulo value 48000000/128 = 375000, 375000Hz/50Hz = 7500	
	TPM1->MOD = 7500;
	TPM2->MOD = 7500;
	
	//Edge-Aligned PWM
	//CMOD - 1 and PS - 111 (128)
	TPM1_SC &= ~((TPM_SC_CMOD_MASK) | (TPM_SC_PS_MASK));
	TPM1_SC |= (TPM_SC_CMOD(1) | TPM_SC_PS(7)); //CMOD = 1 => LPTPM counter increments on every LPTPM counter clock
	TPM1_SC &= ~(TPM_SC_CPWMS_MASK); //count up by default (0)
  
	TPM2_SC &= ~((TPM_SC_CMOD_MASK) | (TPM_SC_PS_MASK));
	TPM2_SC |= (TPM_SC_CMOD(1) | TPM_SC_PS(7)); //CMOD = 1 => LPTPM counter increments on every LPTPM counter clock
	TPM2_SC &= ~(TPM_SC_CPWMS_MASK); //count up by default (0)
	
	//enable PWM on TPM1 channel 0 - PTB0
	TPM1_C0SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM1_C0SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
	
	//enable PWM on TPM1 channel 1 - PTB1
	TPM1_C1SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM1_C1SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
	
	//enable PWM on TPM2 channel 0 - PTB0
	TPM2_C0SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM2_C0SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
	
	//enable PWM on TPM2 channel 1 - PTB1
	TPM2_C1SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM2_C1SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
}


/*	Init UART2	*/
void initUART2(uint32_t baud_rate){
	
	uint32_t divisor, bus_clock;
	
	SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
	SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK;
	
	PORTE-> PCR[UART_RX_PORTE23] &= ~PORT_PCR_MUX_MASK;
	PORTE-> PCR[UART_RX_PORTE23] |= PORT_PCR_MUX(4);
	
	UART2->C2 &= ~((UART_C2_TE_MASK) | (UART_C2_RE_MASK));
	
	bus_clock = DEFAULT_SYSTEM_CLOCK/2;
	divisor = bus_clock / (baud_rate*16);
	UART2->BDH = UART_BDH_SBR(divisor >> 8);
	UART2->BDL = UART_BDL_SBR(divisor);
	
	UART2->C1 = 0;
	UART2->S2 = 0;
	UART2->C3 = 0;
	
	UART2->C2 |= (UART_C2_RE_MASK);
	NVIC_SetPriority(UART2_IRQn, 128);
	NVIC_ClearPendingIRQ(UART2_IRQn);
	NVIC_EnableIRQ(UART2_IRQn);
	UART2->C2 |= UART_C2_RIE_MASK;

}


void turnOffGreen() {
	PTC->PCOR |= (MASK(green_led_segment[0]) | MASK(green_led_segment[1]) | MASK(green_led_segment[2]) | MASK(green_led_segment[3]) | MASK(green_led_segment[4]) |
					MASK(green_led_segment[5]) | MASK(green_led_segment[6]) | MASK(green_led_segment[7]));
}

void turnOnGreen() {
	PTC->PDOR |= (MASK(green_led_segment[0]) | MASK(green_led_segment[1]) | MASK(green_led_segment[2]) | MASK(green_led_segment[3]) | MASK(green_led_segment[4]) |
					MASK(green_led_segment[5]) | MASK(green_led_segment[6]) | MASK(green_led_segment[7]));
}

void turnOffRed() {
	PTC->PCOR |= MASK(red_led_segment);
}

void turnOnRed() {
	PTC->PDOR |= MASK(red_led_segment);
}



void initLED(void)
{
  // Enable Clock to PORTB and PORTD
  SIM->SCGC5 |= ((SIM_SCGC5_PORTC_MASK) | (SIM_SCGC5_PORTE_MASK));
	
  // Configure MUX settings to make all 9 pins GPIO

		PORTC->PCR[green_led_segment[0]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[0]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[1]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[1]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[2]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[2]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[3]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[3]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[4]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[4]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[5]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[5]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[6]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[6]] |= PORT_PCR_MUX(1);
		PORTC->PCR[green_led_segment[7]] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[green_led_segment[7]] |= PORT_PCR_MUX(1);

		PORTC->PCR[red_led_segment] &= ~PORT_PCR_MUX_MASK;
		PORTC->PCR[red_led_segment] |= PORT_PCR_MUX(1);
	
  		// Set Data Direction Registers for PortC
		PTC->PDDR |= (MASK(green_led_segment[0]) | MASK(green_led_segment[1]) | MASK(green_led_segment[2]) | MASK(green_led_segment[3]) | MASK(green_led_segment[4]) |
					MASK(green_led_segment[5]) | MASK(green_led_segment[6]) | MASK(green_led_segment[7]) | MASK(red_led_segment));
		turnOffGreen();
		turnOffRed();
}


/* Thread to light up green LED's sequentially when the robot is moving */
void tRunningGreenLed(void *argument) { //tRunning priority > tStatic
	for (;;) {
		turnOffGreen();
  		uint8_t i = 0;
  		for (; i < 8; ++i) {
			PTC->PDOR = MASK(green_led_segment[i]); //Turns on the green led at the specified index
			osDelay(500);
		}
	}
}

/* Thread to light up all green LED's when the robot is stationery */
void tStationeryGreenLed(void *argument) {
	for (;;) {
		turnOnGreen();
		osDelay(500);
	}
}

void greenled (void *argument) {
	for (;;) {
		if (movingStatus == 1) {
		for (int i = 0;i<8;i++) {
			osMutexAcquire(myMutex,osWaitForever);
			turnOffGreen();
			PTC->PDOR = MASK(green_led_segment[i]);
			osMutexRelease(myMutex);
			osDelay(500);
			i = i%8;
		}
	}
	  else {
			osMutexAcquire(myMutex,osWaitForever);
			turnOnGreen();
			osMutexRelease(myMutex);
		  osDelay(500);
		}
	}
}



void tRunningRedLed(void *argument) {
	for (;;) {
		turnOnRed();
		osDelay(500);
		turnOffRed();
		osDelay(500);
	}
}


void tStationeryRedLed(void *argument) {
	for (;;) {
		turnOnRed();
		osDelay(250);
		turnOffRed();
		osDelay(250);
	}
}

void redled (void *argument) {
	for (;;) {
		if (movingStatus ==1) {
			osMutexAcquire(myMutex,osWaitForever);
			turnOnRed();
			osMutexRelease(myMutex);
			osDelay(500);
			osMutexAcquire(myMutex,osWaitForever);
			turnOffRed();
			osMutexRelease(myMutex);
			osDelay(500);
		}
		else {
			osMutexAcquire(myMutex,osWaitForever);
			turnOnRed();
			osMutexRelease(myMutex);
			osDelay(250);
			osMutexAcquire(myMutex,osWaitForever);
			turnOffRed();
			osMutexRelease(myMutex);
			osDelay(250);
		}
	}
}


/* IRQ HANDLER FOR UART */
void UART2_IRQHandler(void) {
	NVIC_ClearPendingIRQ(UART2_IRQn);
	osStatus_t status;
	if (UART2->S1 & UART_S1_RDRF_MASK) {
	// received a character
		rx_data = UART2->D;
		status = osMessageQueuePut(controlQ, &rx_data , NULL, 0);  
	} 
	
  PORTE->ISFR = 0xffffffff;
	
}

/* Delay Function */

static void delay(volatile uint32_t nof) {
  while(nof!=0) {
    __asm("NOP");
    nof--;
  }
}


/** Stop the motors**/
void stopMotors(){
	TPM1->MOD = 0;
	TPM1_C0V = 0; // stop left fw
	TPM1_C1V = 0; // stop left bk
	
	TPM2->MOD = 0;
	TPM2_C0V = 0; // stop right fw
	TPM2_C1V = 0; // stop right bk
	
	movingStatus = 0;
}

/** Move Forward **/
void forward() {
	osMutexAcquire(myMutex,osWaitForever);
  TPM1->MOD = 7500;
	TPM1_C0V = MAX_DUTY_CYCLE/speed;
 
	TPM2->MOD = 7500;
	TPM2_C0V = MAX_DUTY_CYCLE/(speed*0.9);
	movingStatus = 1;
	osMutexRelease(myMutex);
}

/** Move Reverse **/
void reverse() {
	osMutexAcquire(myMutex,osWaitForever);
	 TPM1->MOD = 7500;
	 TPM1_C1V = MAX_DUTY_CYCLE/speed;
	 TPM2->MOD = 7500;
	 TPM2_C1V = MAX_DUTY_CYCLE/(speed*0.9);
	movingStatus = 1;
	osMutexRelease(myMutex);
	//tRunningGreenLed();
	//tRunningRedLed();
}

/** Turn left **/
void turnLeft() {
	osMutexAcquire(myMutex,osWaitForever);
	TPM1->MOD = 7500;
	 TPM1_C0V = MAX_DUTY_CYCLE/speed;
	 TPM2->MOD = 7500;
	 TPM2_C1V = MAX_DUTY_CYCLE/(speed*0.9);
	movingStatus = 1;
	osMutexRelease(myMutex);
	//tRunningGreenLed();
	//tRunningRedLed();
}

/** Turn right **/
void turnRight() {
	osMutexAcquire(myMutex,osWaitForever);
	TPM1->MOD = 7500;
	 TPM1_C1V = MAX_DUTY_CYCLE/speed;
	 TPM2->MOD = 7500;
	 TPM2_C0V = MAX_DUTY_CYCLE/(speed*0.9);
	movingStatus = 1;
	osMutexRelease(myMutex);
}

/** Swing Left **/
void swingLeft() {
	osMutexAcquire(myMutex,osWaitForever);
	TPM1->MOD = 7500;
	 TPM1_C0V = MAX_DUTY_CYCLE/(speed*0.5); //Left forward, slow
	 TPM2->MOD = 7500;
	 TPM2_C0V = MAX_DUTY_CYCLE/(speed*0.9); //Right forward
	movingStatus = 1;
	osMutexRelease(myMutex);
}


/** Swing Right **/
void swingRight() {
	osMutexAcquire(myMutex,osWaitForever);
	TPM1->MOD = 7500;
	 TPM1_C0V = MAX_DUTY_CYCLE/speed; //Left forward
	 TPM2->MOD = 7500;
	 TPM2_C0V = MAX_DUTY_CYCLE/(speed*0.9*0.5); //Right forward, slow
	movingStatus = 1;
	osMutexRelease(myMutex);
}

void motor_thread (void *argument) {
	uint8_t myRxData;
	for(;;) {
		osMessageQueueGet(motorQ, &myRxData, NULL, osWaitForever);
   		if(myRxData == FW_MASK){ //0x03
			forward();
		}else if(myRxData == RV_MASK){ //0x05
			reverse();
		}else if(myRxData == RT_MASK){ //0x09
			turnRight();
		}else if(myRxData == LT_MASK){ //0x07
			turnLeft();
		}else if(myRxData == STOP_MASK){ //0x0B
			stopMotors();	
		}else if(myRxData == SL_MASK) //0x08 {
			swingLeft();
		} else if (myRxData == SR_MASK) //0x0A {
			swingRight();
		} 
	}
}



void control_thread(void *argument) {
	for(;;) {
		osMessageQueueGet(controlQ, &uart_data, NULL, osWaitForever);
		osMessageQueuePut(motorQ, &uart_data, NULL, 0);
		osDelay(1000);
	}
}

const osThreadAttr_t thread_attr1 = {
	.priority = osPriorityHigh
};

const osThreadAttr_t thread_attr2 = {
	.priority = osPriorityHigh - 1
};

 
int main(void) {

 SystemCoreClockUpdate();
 initUART2(BAUD_RATE);
 initPWM();
	osKernelInitialize(); 
	osMutexNew(myMutex);
	osThreadNew(control_thread, NULL, &thread_attr1);
	controlQ = osMessageQueueNew(MSG_COUNT, sizeof(uint8_t), NULL);
	osThreadNew (motor_thread, NULL, &thread_attr2);
	motorQ = osMessageQueueNew(MSG_COUNT, sizeof(uint8_t), NULL);
	//osThreadNew(tRunningGreenLed, NULL, NULL);    // Create application main thread
  	//osThreadNew( tStationeryGreenLed, NULL, NULL);    // Create application main thread
	//osThreadNew(tRunningRedLed, NULL, NULL);    // Create application main thread
	//osThreadNew(tStationeryRedLed, NULL, NULL);    // Create application main thread
	osThreadNew(redled,NULL,NULL);
	osThreadNew(greenled,NULL,NULL);
	osKernelStart();                      // Start thread execution
	
	
  for (;;) {}
	
	}
